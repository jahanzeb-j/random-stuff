check pairs 

  Set<Integer> colors = new HashSet<>();
    int pairs = 0;

    for (int i = 0; i < n; i++) {
        if (!colors.contains(c[i])) {
            colors.add(c[i]);
        } else {
            pairs++;
            colors.remove(c[i]);
        }
    }



---------------
left rotate arrray

   int[] result = new int[a.length];
        for (int i = 0; i < a.length; i++) {
    
    result[(i + (a.length - d)) % a.length] = a[i];
        System.out.println((i + (a.length - d)) % a.length);
}

        return result;
----------
2D array

sum = []


for i in range(len(arr)-2):
    for j in range(len(arr)-2):
        sum.append(arr[i][j]+arr[i][j+1]+arr[i][j+2]+arr[i+1][j+1]+arr[i+2][j]+arr[i+2][j+1]+arr[i+2][j+2])
        
print(max(sum))
----

minium bribe-

    int bribes=0;
    for(int i=q.size();i>=1;--i)
    { 
        if (q[i - 1] - i > 2) {
          cout << "Too chaotic\n";
          return;
        }
        //Check to front of my position, if there are numbers greater than me then they must have bribed me to get ahead.
    for(int j=i-2;j>=max(q[i-1]-2,0);--j)
    if(q[j]>q[i-1]) bribes++;       
    }
     cout<<bribes<<"\n";  
}
-------------
cloud jump--

 static int jumpingOnClouds(int[] c) {
        int score = 0;
        
        for(int i=0; i<c.length; i++){

             if(c[i]==0){
                   
               if(i<c.length-1 && c[i+1]==1){
                score++;
                 System.out.println(i);
               }
                else if(c[i]==0 && i==c.length-1){
                    score++;
                 System.out.println(i);
                    
                }
            }
            
        }

        return score+1;
    }

--------------
arry minimual - Eqaul the array --  

 static int equalizeArray(int[] arr) {

        int greater = 0;
        
        HashMap<Integer,Integer> count = new HashMap<Integer,Integer>();
        for(int i = 0; i<arr.length; i++){
            if(count.containsKey(arr[i])){
                count.replace(arr[i],count.get(arr[i])+1);
                if(greater<count.get(arr[i])){
                    greater = count.get(arr[i]);
                }
            }
            else{
                count.put(arr[i],1);
            }
            
        }
          
        return arr.length-greater;
    }


--------------------


















